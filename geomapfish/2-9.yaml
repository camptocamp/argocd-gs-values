# File contains base configuration

global:
  image:
    pullPolicy: IfNotPresent
  revisionHistoryLimit: 0

shared:
  redisEnv: &redisEnv
    REDIS_HOST:
      type: secret
      name: self-external-secret-app
      key: REDIS_HOST
    REDIS_PORT:
      type: secret
      name: self-external-secret-app
      key: REDIS_PORT
    REDIS_PASSWORD:
      type: secret
      name: self-external-secret-app
      key: REDIS_PASSWORD
    REDIS_SSL:
      value: 'true'
    C2C_REDIS_URL:
      value: rediss://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/$(REDIS_DB)
      order: 1
    C2C_BROADCAST_PREFIX:
      value: broadcast_geoportal_$(REDIS_DB)_
      order: 1
    C2C_REDIS_TIMEOUT:
      value: '30'
    REDIS_TIMEOUT:
      value: '30'

  c2cwsgiutilsEnv: &c2cwsgiutilsEnv
    C2C_LOG_VIEW_ENABLED:
      value: '1'
    C2C_DEBUG_VIEW_ENABLED:
      value: '1'
    C2C_SQL_PROFILER_ENABLED:
      value: '1'
    LOG_TYPE:
      value: json
    C2C_REQUESTS_DEFAULT_TIMEOUT:
      value: '180'
    GUNICORN_CMD_ARGS:
      value: --worker-tmp-dir=/dev/shm
    GUNICORN_WORKERS:
      value: '2'
    GUNICORN_THREADS:
      value: '10'
    GUNICORN_TIMEOUT:
      value: '30'
    GUNICORN_MAX_REQUESTS:
      value: '2000'
    GUNICORN_MAX_REQUESTS_JITTER:
      value: '200'
    GUNICORN_LIMIT_REQUEST_LINE:
      value: '8190'
    GUNICORN_ACCESS_LOG_FORMAT:
      value: '%(H)s %({Host}i)s %(m)s %(U)s?%(q)s "%(f)s" "%(a)s" %(s)s %(B)s %(D)s
        %(p)s'

  pgOptionsEnv: &pgOptionsEnv
    POSTGRESQL_STATEMENT_TIMEOUT:
      value: '30000' # milliseconds
    PGOPTIONS:
      value: -c statement_timeout=$(POSTGRESQL_STATEMENT_TIMEOUT)
      order: 1

  dbEnv: &dbEnv
    <<: *pgOptionsEnv
    PGSSLMODE:
      value: require
    PGHOST:
      type: secret
      name: self-external-secret-app
      key: PGHOST
    PGHOST_SLAVE:
      type: secret
      name: self-external-secret-app
      key: PGHOST_SLAVE
    PGPORT:
      type: secret
      name: self-external-secret-app
      key: PGPORT
    PGPORT_SLAVE:
      type: secret
      name: self-external-secret-app
      key: PGPORT_SLAVE
    PGDATABASE:
      type: secret
      name: self-external-secret-app
      key: PGDATABASE
    PGUSER:
      type: secret
      name: self-external-secret-app
      key: PGUSER
    PGPASSWORD:
      type: secret
      name: self-external-secret-app
      key: PGPASSWORD

  # Temporarily disabled
  azureBlobEnv: &azureBlobEnv {}

  sentryEnv: &sentryEnv
    SENTRY_HOSTNAME:
      value: o330647.ingest.sentry.io
    SENTRY_URL:
      value: https://$(SENTRY_KEY)@$(SENTRY_HOSTNAME)/$(SENTRY_PROJECT)
      order: 1
    SENTRY_KEY:
      type: secret
      name: self-external-secret-app
      key: SENTRY_KEY
    SENTRY_PROJECT:
      type: secret
      name: self-external-secret-app
      key: SENTRY_PROJECT
    SENTRY_TRACES_SAMPLE_RATE:
      value: '0.1'

  internalUrlEnv: &internalUrlEnv
    SERVICE_MAPSERVER_NAME:
      type: configMap
      name: self-metadata
      key: SERVICE_MAPSERVER_NAME
    MAPSERVER_URL:
      value: http://$(SERVICE_MAPSERVER_NAME)/
      order: 1
    SERVICE_QGISSERVER_NAME:
      type: configMap
      name: self-metadata
      key: SERVICE_QGISSERVER_NAME
    QGISSERVER_URL:
      value: http://$(SERVICE_QGISSERVER_NAME)/
      order: 1
    SERVICE_TINYOWS_NAME:
      type: configMap
      name: self-metadata
      key: SERVICE_TINYOWS_NAME
    TINYOWS_URL:
      value: http://$(SERVICE_TINYOWS_NAME)/
      order: 1

  sqlalchemyEnv: &sqlalchemyEnv
    SQLALCHEMY_POOL_RECYCLE:
      value: '30'
    SQLALCHEMY_POOL_SIZE:
      value: '1'
    SQLALCHEMY_MAX_OVERFLOW:
      value: '10'
    SQLALCHEMY_SLAVE_POOL_RECYCLE:
      value: '30'
    SQLALCHEMY_SLAVE_POOL_SIZE:
      value: '5'
    SQLALCHEMY_SLAVE_MAX_OVERFLOW:
      value: '10'

  configEnv: &configEnv
    <<: [*dbEnv, *azureBlobEnv, *internalUrlEnv, *sentryEnv, *sqlalchemyEnv]
    VISIBLE_WEB_PROTOCOL:
      value: https
    VISIBLE_ENTRY_POINT:
      value: /
    MAPSERVER_DATA_SUBSELECT:
      value: >
        SELECT ST_Collect(ra.area)
        FROM $(PGSCHEMA).restrictionarea AS ra,
        $(PGSCHEMA).role_restrictionarea AS rra,
        $(PGSCHEMA).layer_restrictionarea AS lra,
        $(PGSCHEMA).treeitem AS la
        WHERE rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id
        AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =
      order: 1
    MAPSERVER_DATA_NOAREA_SUBSELECT:
      value: >
        SELECT rra.role_id
        FROM $(PGSCHEMA).restrictionarea AS ra,
        $(PGSCHEMA).role_restrictionarea AS rra,
        $(PGSCHEMA).layer_restrictionarea AS lra,
        $(PGSCHEMA).treeitem AS la
        WHERE rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id
        AND lra.layer_id = la.id AND la.name =
      order: 1
    MAPSERVER_JOIN_TABLES:
      value: >
        $(PGSCHEMA).restrictionarea AS ra,
        $(PGSCHEMA).role_restrictionarea AS rra,
        $(PGSCHEMA).layer_restrictionarea AS lra,
        $(PGSCHEMA).treeitem AS la
      order: 1
    MAPSERVER_JOIN_WHERE:
      value: >
        rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND
        lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =
      order: 1
    BASICAUTH:
      value: 'false'
    SRID:
      value: '2056'

  gdalEnv: &gdalEnv
    CPL_VSIL_CURL_USE_CACHE:
      value: 'TRUE'
    CPL_VSIL_CURL_CACHE_SIZE:
      value: '64000000' # 64 MB
    CPL_VSIL_CURL_USE_HEAD:
      value: 'FALSE'
    GDAL_DISABLE_READDIR_ON_OPEN:
      value: 'TRUE'
    # By default it's 5% of the node memory
    GDAL_CACHEMAX:
      value: '64' # MB
    VSI_CACHE_SIZE:
      value: '64000000' # 64 MB

app:
  metadata:
    enabled: true
  secrets:
    enabled: true
  securityContext:
    readOnlyRootFilesystem: false

  externalSecrets:
    app:
      secretStoreRef:
        name: keyvault
        kind: SecretStore
      data:
        AUTHTKT_SECRET:
          remoteRef:
            key: authtkt-secret
        SENTRY_PROJECT:
          remoteRef:
            key: sentry-project
        SENTRY_KEY:
          remoteRef:
            key: sentry-key
        SENTRY_SECRET:
          remoteRef:
            key: sentry-secret

  configMaps:
    content:
      # https://httpd.apache.org/docs/2.4/mod/worker.html
      mpm_event.conf:
        value: |
          # event MPM
          # StartServers: initial number of server processes to start
          # MinSpareThreads: minimum number of worker threads which are kept spare
          # MaxSpareThreads: maximum number of worker threads which are kept spare
          # ThreadsPerChild: constant number of worker threads in each server process
          # MaxRequestWorkers: maximum number of worker threads
          # MaxConnectionsPerChild: maximum number of requests a server process serves
          <IfModule mpm_event_module>
                  # default: 2
                  StartServers             1
                  # default: 25
                  MinSpareThreads          1
                  # default: 75
                  MaxSpareThreads          1
                  # default: 64
                  ThreadLimit              1
                  # default: 25
                  ThreadsPerChild          1
                  # default: 150
                  MaxRequestWorkers        150
                  MaxConnectionsPerChild   0

      # https://httpd.apache.org/mod_fcgid/mod/mod_fcgid.html
      mapserver.conf:
        value: |
          # MapServer has memory leaks, this limit should improve long term memory usage
          FcgidMinProcessesPerClass ${MIN_PROCESSES}
          FcgidMaxProcessesPerClass ${MAX_PROCESSES}
          FcgidMaxProcesses ${MAX_PROCESSES}
          FcgidBusyTimeout ${BUSY_TIMEOUT}
          FcgidIdleTimeout ${IDLE_TIMEOUT}
          FcgidIOTimeout ${IO_TIMEOUT}
          LimitRequestLine ${APACHE_LIMIT_REQUEST_LINE}
          FcgidProcessTableFile /tmp/fcgid_shm
          FcgidIPCDir /tmp/mod_fcgid

          ScriptAliasMatch "^${MAPSERVER_BASE_PATH}/(.*)" /usr/local/bin/mapserv_wrapper/$1
          ScriptAliasMatch "^${MAPSERVER_BASE_PATH}" /usr/local/bin/mapserv_wrapper
          <LocationMatch "^/.*">
            # Enable CORS (required for WFS requests)
            Header set Access-Control-Allow-Origin "*"
            Header set Cache-Control "max-age=0, must-revalidate, no-cache, no-store"

            SetHandler fcgid-script
            Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
            Require all granted
            Include /tmp/pass-env
          </LocationMatch>

          ExtendedStatus On
          <Location "/server-status-remote">
              SetHandler server-status
          </Location>

          ServerName localhost

      # https://httpd.apache.org/mod_fcgid/mod/mod_fcgid.html
      qgisserver.conf:
        value: |
          # QGIS has memory leaks, this limit should improve long term memory usage
          FcgidMinProcessesPerClass ${FCGID_MIN_PROCESSES}
          FcgidMaxProcessesPerClass ${FCGID_MAX_PROCESSES}
          FcgidMaxProcesses ${FCGID_MAX_PROCESSES}
          FcgidBusyTimeout ${FCGID_BUSY_TIMEOUT}
          FcgidIdleTimeout ${FCGID_IDLE_TIMEOUT}
          FcgidIOTimeout ${FCGID_IO_TIMEOUT}
          FcgidProcessTableFile /tmp/fcgid_shm
          FcgidIPCDir /tmp/mod_fcgid

          ScriptAliasMatch "^/.*" /usr/local/bin/qgis-mapserv-wrapper
          <LocationMatch "^/.*">
              SetHandler fcgid-script
              Require all granted
              Include /tmp/pass-env
              Header set Access-Control-Allow-Origin "*"
          </LocationMatch>

          ExtendedStatus On
          <Location "/server-status-remote">
              SetHandler server-status
          </Location>

          ServerName localhost

  services:
    geoportal:
      enabled: true

      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%

      annotations:
        reloader.stakater.com/auto: 'true'
      podLabels:
        redis-client: 'true'
        team: gmf

      ingress:
        enabled: true
        path: /

      affinity:
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname

      service:
        ports:
          - port: 80
            targetPort: http
            protocol: TCP
            name: http

      podMonitor:
        enabled: true
        podMetricsEndpoints:
          prometheus:
            honorLabels: true
            interval: 10s

      volumes:
        geomapfish:
          emptyDir: {}
      initContainers:
        config: &config
          args:
            - bash
            - -c
            - cp -a /etc/geomapfish/* /etc/geomapfish-volume/

          env: *configEnv
          resources:
            requests:
              memory: 16Mi
              cpu: 1m
            limits:
              memory: 64Mi
              cpu: '2'
              ephemeral-storage: 16Mi

          volumeMounts:
            /etc/geomapfish-volume:
              name: geomapfish

      containers:
        geoportal:
          ports:
            http:
              containerPort: 8080
              protocol: TCP

          # Load he cache in memory
          startupProbe:
            httpGet:
              path: /themes?background=background&interface=desktop
              port: http
            timeoutSeconds: 120
          livenessProbe:
            httpGet:
              path: /c2c/health_check?max_level=0
              port: http
            timeoutSeconds: 30
            initialDelaySeconds: 30
            periodSeconds: 60
          readinessProbe:
            httpGet:
              path: /c2c/health_check?max_level=0
              port: http
            timeoutSeconds: 120
            initialDelaySeconds: 10
            periodSeconds: 180

          volumeMounts:
            /etc/geomapfish:
              name: geomapfish
              readOnly: true

          resources:
            limits:
              # It can be 450Mi if we remove the phantomjs checks
              memory: 800Mi
              cpu: '2'
              ephemeral-storage: 128Mi
            requests:
              memory: 271Mi
              cpu: 88m
              ephemeral-storage: 64Mi

          env:
            <<: [*configEnv, *c2cwsgiutilsEnv, *redisEnv, *internalUrlEnv, *sqlalchemyEnv]
            RASTER_BASE_PATH:
              value: /vsiaz/$(AZURE_STORAGE_DATA_CONTAINER_NAME)/
              order: 1
            SENTRY_CLIENT_RELEASE:
              type: configMap
              name: self-metadata
              key: SERVICE_GEOPORTAL_CONTAINER_GEOPORTAL_IMAGE_TAG
            SENTRY_TAG_SERVICE:
              value: geoportal
            REDIS_LOCK_TIMEOUT:
              value: '180' # 3 minutes
            SENTRY_TRACES_SAMPLE_RATE:
              value: '0.1'
            C2C_DB_MAINTENANCE_VIEW_ENABLED:
              value: '1'
            AUTHTKT_SECRET:
              type: secret
              name: self-external-secret-app
              key: AUTHTKT_SECRET
            C2C_AUTH_GITHUB_CLIENT_ID:
              type: secret
              name: self-external-secret-shared
              key: C2C_AUTH_GITHUB_CLIENT_ID
            C2C_AUTH_GITHUB_CLIENT_SECRET:
              type: secret
              name: self-external-secret-shared
              key: C2C_AUTH_GITHUB_CLIENT_SECRET
            C2C_AUTH_GITHUB_SECRET:
              type: secret
              name: self-external-secret-shared
              key: C2C_AUTH_GITHUB_SECRET
            C2C_AUTH_GITHUB_REPOSITORY_ACCESS_TYPE:
              value: push

    alembic:
      enabled: true
      type: Job
      concurrencyPolicy: Forbid

      annotations:
        argocd.argoproj.io/hook: PostSync
        argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
      podLabels:
        team: gmf

      restartPolicy: OnFailure

      volumes:
        geomapfish:
          emptyDir: {}

      # TODO
      #mainStatic: false
      initContainers:
        config:
          <<: *config
          volumeMounts:
            /etc/geomapfish-volume:
              name: geomapfish

      containers:
        alembic:
          env:
            <<: [*configEnv, *c2cwsgiutilsEnv]
            SENTRY_CLIENT_RELEASE:
              type: configMap
              name: self-metadata
              key: SERVICE_ALEMBIC_CONTAINER_ALEMBIC_IMAGE_TAG
            SENTRY_TAG_SERVICE:
              value: alembic

          args:
            - bash
            - -c
            - alembic --name=static upgrade head

          volumeMounts:
            /etc/geomapfish:
              name: geomapfish
              readOnly: true

          resources:
            requests:
              cpu: 100m
              memory: 40Mi
            limits:
              memory: 128Mi
              cpu: '2'
              ephemeral-storage: 20Mi

    tools:
      enabled: true

      annotations:
        reloader.stakater.com/auto: 'true'
      podLabels:
        redis-client: 'true'
        team: gmf

      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%

      volumes:
        geomapfish:
          emptyDir: {}
        print:
          emptyDir: {}

      initContainers:
        config:
          <<: *config
          args:
            - bash
            - -c
            - cp -a /etc/geomapfish/* /etc/geomapfish-volume/; cp -a /usr/local/tomcat/webapps/ROOT/print-apps/*
              /etc/print-volume/;
          volumeMounts:
            /etc/geomapfish-volume:
              name: geomapfish
            /etc/print-volume:
              name: print

      containers:
        tools:
          volumeMounts:
            /etc/geomapfish:
              name: geomapfish
              readOnly: true
            /usr/local/tomcat/webapps/ROOT/print-apps:
              name: print
              readOnly: true

          resources:
            limits:
              memory: 200Mi
              cpu: '2'
              ephemeral-storage: 16Mi
            requests:
              memory: 100Mi
              cpu: 1m

          env: *configEnv

    fts-cron:
      enabled: true
      type: CronJob
      schedule: 35 * * * *
      concurrencyPolicy: Forbid
      successfulJobsHistoryLimit: 1
      failedJobsHistoryLimit: 2

      restartPolicy: OnFailure

      podLabels:
        team: gmf

      volumes:
        configs:
          emptyDir: {}

      initContainers:
        config:
          <<: *config
          args:
            - bash
            - -c
            - cp -a /etc/geomapfish/* /etc/geomapfish-volume/
          volumeMounts:
            /etc/geomapfish-volume:
              name: configs

      containers:
        fts-cron:
          args:
            - theme2fts

          volumeMounts:
            /etc/geomapfish:
              name: configs
              readOnly: true

          env:
            <<: [*configEnv, *c2cwsgiutilsEnv, *internalUrlEnv, *sqlalchemyEnv]
            SENTRY_CLIENT_RELEASE:
              type: configMap
              name: self-metadata
              key: SERVICE_FTS-CRON_CONTAINER_FTS-CRON_IMAGE_TAG
            SENTRY_TAG_SERVICE:
              value: fts-cron
            AUTHTKT_SECRET:
              value: fake_012345678901234567890123456789012345678901234567890123456789
            EVALUATE_APP:
              value: 'false'
            EVALUATE_NGEO_TMPL:
              value: 'false'
            EVALUATE_NGEO_JS:
              value: 'false'
            EVALUATE_NGEO_CSS:
              value: 'false'
            EVALUATE_NGEO_HTML:
              value: 'false'
          resources:
            requests:
              cpu: 88m
              memory: 271Mi
              ephemeral-storage: 32Mi
            limits:
              memory: 425Mi
              cpu: '2'
              ephemeral-storage: 64Mi

    mapserver:
      enabled: false

      annotations:
        reloader.stakater.com/auto: 'true'
      podLabels:
        team: gmf

      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%

      podMonitor:
        enabled: true
        podMetricsEndpoints:
          prometheus:
            honorLabels: true
            interval: 10s

      service:
        ports:
          - port: 80
            targetPort: http
            protocol: TCP
            name: http

      volumes:
        configs:
          emptyDir: {}
        tmp:
          emptyDir: {}
        log:
          emptyDir: {}
        run:
          emptyDir: {}
        lock:
          emptyDir: {}
        mpm-event-conf:
          configMap:
            items:
              - key: mpm_event.conf
                path: mpm_event.conf
        mapserver-conf:
          configMap:
            items:
              - key: mapserver.conf
                path: mapserver.conf

      affinity:
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname

      initContainers:
        config:
          <<: *config
          args:
            - bash
            - -c
            - cp -a /etc/mapserver/* /etc/configs/
          volumeMounts:
            /etc/configs:
              name: configs
          env:
            <<: *configEnv
            RASTER_BASE_PATH:
              value: /vsiaz/$(AZURE_STORAGE_DATA_CONTAINER_NAME)/
              order: 1

      containers:
        mapserver:
          command: [/bin/bash]
          args: [/usr/local/bin/start-server]

          volumeMounts:
            /etc/mapserver:
              name: configs
              readOnly: true
            /tmp:
              name: tmp
            /var/log:
              name: log
            /var/run/apache2:
              name: run
            /var/lock:
              name: lock
            /etc/apache2/mods-enabled/mpm_event.conf:
              name: mpm-event-conf
              subPath: mpm_event.conf
              readOnly: true
            /etc/apache2/conf-enabled/mapserver.conf:
              name: mapserver-conf
              subPath: mapserver.conf
              readOnly: true
          ports:
            http:
              containerPort: 8080
              protocol: TCP

          env:
            <<: [*pgOptionsEnv, *gdalEnv]
            APACHE_RUN_DIR:
              value: /var/run/apache2
            APACHE_PID_FILE:
              value: /var/run/apache2/apache2.pid
            MIN_PROCESSES:
              value: '1'
            MAX_PROCESSES:
              value: '1'
            IO_TIMEOUT:
              value: '180' # 3 minutes
            APACHE_LIMIT_REQUEST_LINE:
              value: '8190'
            MAPSERVER_CONFIG_FILE:
              value: /etc/mapserver/mapserver.conf
            PROJ_LIB:
              value: /usr/local/share/proj

          resources:
            requests:
              memory: 40Mi
              cpu: 4m
              ephemeral-storage: 32Mi
            limits:
              memory: 600Mi
              cpu: '2'
              ephemeral-storage: 256Mi

          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 2
            timeoutSeconds: 10
            periodSeconds: 20
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 2
            timeoutSeconds: 60
            periodSeconds: 30
            failureThreshold: 5
          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 2
            periodSeconds: 20
            timeoutSeconds: 10

        apache-exporter: &apacheExporter
          args:
            - --scrape_uri=http://localhost:8080/server-status-remote?auto

          ports:
            prometheus:
              containerPort: 9117
              protocol: TCP

          readinessProbe:
            httpGet:
              path: /
              port: prometheus
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 20

          resources:
            limits:
              memory: 30Mi
              cpu: '2'
              ephemeral-storage: 32Mi
            requests:
              memory: 10Mi
              cpu: 1m

    qgisserver:
      enabled: false

      annotations:
        reloader.stakater.com/auto: 'true'
      podLabels:
        team: gmf

      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%

      podMonitor:
        enabled: true
        podMetricsEndpoints:
          prometheus:
            honorLabels: true
            interval: 10s

      service:
        ports:
          - port: 80
            targetPort: http
            protocol: TCP
            name: http

      volumes:
        configs:
          emptyDir: {}
        tmp:
          emptyDir: {}
        log:
          emptyDir: {}
        run:
          emptyDir: {}
        lock:
          emptyDir: {}
        mpm-event-conf:
          configMap:
            items:
              - key: mpm_event.conf
                path: mpm_event.conf
        qgisserver-conf:
          configMap:
            items:
              - key: qgisserver.conf
                path: qgisserver.conf

      affinity:
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname

      initContainers:
        config:
          <<: *config
          args:
            - bash
            - -c
            - cp -a /etc/qgisserver/* /etc/configs/
          volumeMounts:
            /etc/configs:
              name: configs

          env:
            <<: *configEnv
            RASTER_BASE_PATH:
              value: /vsiaz/$(AZURE_STORAGE_DATA_CONTAINER_NAME)/
              order: 1

      containers:
        qgisserver:
          volumeMounts:
            /etc/qgisserver:
              name: configs
              readOnly: true
            /tmp:
              name: tmp
            /var/log/apache2:
              name: log
            /var/run/apache2:
              name: run
            /var/lock:
              name: lock
            /etc/apache2/mods-enabled/mpm_event.conf:
              name: mpm-event-conf
              subPath: mpm_event.conf
              readOnly: true
            /etc/apache2/conf-enabled/qgisserver.conf:
              name: qgisserver-conf
              subPath: qgisserver.conf
              readOnly: true

          ports:
            http:
              containerPort: 8080
              protocol: TCP

          env:
            <<: [*redisEnv, *azureBlobEnv, *gdalEnv]
            APACHE_RUN_DIR:
              value: /var/run/apache2
            APACHE_PID_FILE:
              value: /var/run/apache2/apache2.pid
            SERVICE_QGISSERVER_NAME:
              type: configMap
              name: self-metadata
              key: SERVICE_QGISSERVER_NAME
            FCGID_MIN_PROCESSES:
              value: '1'
            FCGID_MAX_PROCESSES:
              value: '1'
            MAX_REQUESTS_PER_PROCESS:
              value: '500'
            GEOMAPFISH_ACCESSCONTROL_BASE_URL:
              value: http://$(SERVICE_QGISSERVER_NAME)/
              order: 1
            FCGID_IO_TIMEOUT:
              value: '120'
            QGIS_SERVER_LOG_LEVEL:
              value: '2' # 0 for verbose
            QGIS_CUSTOM_CONFIG_PATH:
              value: /tmp
            QGIS_SERVER_TRUST_LAYER_METADATA:
              value: 'TRUE'
            QGIS_SERVER_PARALLEL_RENDERING:
              value: 'FALSE'
            MAX_CACHE_LAYERS:
              value: '100'
            QGIS_SERVER_IGNORE_BAD_LAYERS:
              value: 'TRUE'
            QGIS_SERVER_CACHE_SIZE:
              value: '60' # MB
            QGIS_SERVER_WMS_MAX_HEIGHT:
              value: '5000'
            QGIS_SERVER_WMS_MAX_WIDTH:
              value: '5000'
            QGIS_SERVER_API_WFS3_MAX_LIMIT:
              value: '10000'
            QGIS_SERVER_DISABLE_GETPRINT:
              value: 'TRUE'
            QGIS_SERVER_LANDING_PAGE_PROJECTS_DIRECTORIES:
              value: /etc/qgisserver/
            QGIS_SERVER_OVERRIDE_SYSTEM_LOCALE:
              value: fr
            QGIS_AUTH_DB_DIR_PATH:
              value: /etc/qgisserver/
            QGIS_SERVER_PROJECT_CACHE_STRATEGY:
              value: periodic
            QGIS_SERVER_PROJECT_CACHE_CHECK_INTERVAL:
              value: '3600000' # one hour, in milli seconds
            PGSERVICEFILE:
              value: /etc/qgisserver/pg_service.conf

          resources:
            requests:
              memory: 113Mi
              cpu: 12.5m
            limits:
              memory: 1Gi
              cpu: '2'
              ephemeral-storage: 2Gi

          readinessProbe:
            httpGet:
              path: /?SERVICE=WMS&REQUEST=GetCapabilities&MAP=/etc/qgisserver/project.qgz
              port: http
            initialDelaySeconds: 20
            timeoutSeconds: 300
            periodSeconds: 20
          livenessProbe:
            httpGet:
              path: /?SERVICE=WMS&REQUEST=GetCapabilities&MAP=/etc/qgisserver/project.qgz
              port: http
            initialDelaySeconds: 20
            timeoutSeconds: 300
            periodSeconds: 60
          startupProbe:
            httpGet:
              path: /?SERVICE=WMS&REQUEST=GetCapabilities&MAP=/etc/qgisserver/project.qgz
              port: http
            initialDelaySeconds: 20
            periodSeconds: 30
            timeoutSeconds: 300
            failureThreshold: 50

        apache-exporter: *apacheExporter

    tinyows:
      enabled: false

      annotations:
        reloader.stakater.com/auto: 'true'
      podLabels:
        team: gmf

      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%

      podMonitor:
        enabled: true
        podMetricsEndpoints:
          prometheus:
            honorLabels: true
            interval: 10s

      service:
        ports:
          - port: 80
            targetPort: http
            protocol: TCP
            name: http

      volumes:
        configs:
          emptyDir: {}
        tmp:
          emptyDir: {}

      affinity:
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname

      initContainers:
        config:
          <<: *config
          args:
            - bash
            - -c
            - cp -a /etc/mapserver/* /etc/configs/
          volumeMounts:
            /etc/configs:
              name: configs
          env:
            <<: *configEnv

      containers:
        tinyows:
          volumeMounts:
            /etc/mapserver:
              name: configs
              readOnly: true
            /tmp:
              name: tmp

          ports:
            http:
              containerPort: 8080
              protocol: TCP

          readinessProbe:
            httpGet:
              path: /?SERVICE=WFS&REQUEST=GetCapabilities&VERSION=1.1.0
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /?SERVICE=WFS&REQUEST=GetCapabilities&VERSION=1.1.0
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10

          resources:
            requests:
              memory: 24Mi
              cpu: 5m
            limits:
              memory: 64Mi
              cpu: '2'
              ephemeral-storage: 32Mi

        apache-exporter: *apacheExporter

  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      ingress.kubernetes.io/ssl-redirect: 'true'
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: 'true'

mutualize:
  rbac: true
  rbacGroups:
    - d4d4859b-b839-4e80-922e-29090cb24ef1 # AD Group: [Geospatial Solutions] GMF developers

geoserver-cloud:
  geoserver:
    services:
      gateway: &geoserver-service
        annotations:
          reloader.stakater.com/auto: 'true'
        podLabels:
          team: gmf

        volumes:
          configs:
            emptyDir: {}

        initContainers:
          config:
            <<: *config
            args:
              - bash
              - -c
              - cp -a /etc/geoserver/* /etc/geoserver-volume/
            volumeMounts:
              /etc/geoserver-volume:
                name: configs

        containers:
          spring:
            volumeMounts:
              /etc/geoserver:
                name: configs
                readOnly: true

      webui: *geoserver-service
      rest: *geoserver-service
      wfs: *geoserver-service
      wms: *geoserver-service
      wcs: *geoserver-service
      gwc: *geoserver-service
